
#include "statsf.h"

#define SFL_INITIAL_LIST_SIZE   1024
#define SFL_MAX_FUNCTIONS       64      // Max functions computed in 1 pass
#define SFL_MAX_FIELD_LEN       4096    // Any field, not just numeric

#define SFL_FLAG_NONE           0x00
#define SFL_FLAG_VERBOSE        0x01

typedef struct
{
    unsigned    count;
    statsf_t    functions[SFL_MAX_FUNCTIONS];
}   statsf_list_t;

/* Return values for mutator functions */
#define SFL_DATA_OK              0
#define SFL_DATA_INVALID         -1      // Catch-all for non-specific error
#define SFL_DATA_OUT_OF_RANGE    -2

/*
 *  Generated by /usr/local/bin/auto-gen-get-set
 *
 *  Accessor macros.  Use these to access structure members from functions
 *  outside the statsf_list_t class.
 *
 *  These generated macros are not expected to be perfect.  Check and edit
 *  as needed before adding to your code.
 */

#define STATSF_LIST_COUNT(ptr)          ((ptr)->count)
#define STATSF_LIST_FUNCTIONS(ptr)      ((ptr)->functions)
#define STATSF_LIST_FUNCTIONS_AE(ptr,c) ((ptr)->functions[c])

/*
 *  Generated by /usr/local/bin/auto-gen-get-set
 *
 *  Mutator macros for setting with no sanity checking.  Use these to
 *  set structure members from functions outside the statsf_list_t
 *  class.  These macros perform no data validation.  Hence, they achieve
 *  maximum performance where data are guaranteed correct by other means.
 *  Use the mutator functions (same name as the macro, but lower case)
 *  for more robust code with a small performance penalty.
 *
 *  These generated macros are not expected to be perfect.  Check and edit
 *  as needed before adding to your code.
 */

#define STATSF_LIST_SET_COUNT(ptr,val)          ((ptr)->count = (val))
#define STATSF_LIST_SET_FUNCTIONS_CPY(ptr,val,array_size) \
    for (size_t c = 0; c < (array_size); ++c) (ptr)->functions[c] = val[c];
#define STATSF_LIST_SET_FUNCTIONS_AE(ptr,c,val) ((ptr)->functions[c] = (val))

#include "statsf-list-protos.h"
#include "statsf-list-mutators-protos.h"
